// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench template that is freely editable to  
// suit user's needs .Comments are provided in each section to help the user    
// fill out necessary details.                                                  
// *****************************************************************************
// Generated on "11/24/2018 16:17:16"
                                                                                
// Verilog Test Bench template for design : top_cpld
// 
// Simulation tool : ModelSim (Verilog)
// 

`timescale 1 ps/ 1 ps
module top_cpld_vlg_tst();
// constants                                           

// test vector input registers
reg [15:0] arm_addr;
reg arm_cs;
reg [15:0] treg_arm_data;
reg arm_rd;
reg arm_wr;
reg clk;
reg io_chrdy;
reg arm_clk;
reg [15:0] treg_isa_data;
reg rst_n;
reg bale_edge;
reg bale_flag;
reg [2:0] test_status;
// wires                                               
wire [15:0]  arm_data;
wire arm_wait;
wire bale;
wire [15:0]  isa_addr;
wire [6:0]  isa_la_addr;
wire isa_clk;
wire [15:0]  isa_data;
wire mem_r;
wire mem_w;

// assign statements (if any)                          
assign arm_data = treg_arm_data;
assign isa_data = treg_isa_data;
top_cpld i1 (
// port map - connection between master ports and signals/registers   
	.arm_addr(arm_addr),
	.arm_cs(arm_cs),
	.arm_data(arm_data),
	.arm_rd(arm_rd),
	.arm_wait(arm_wait),
	.arm_wr(arm_wr),
	.bale(bale),
	.clk(clk),
	.io_chrdy(io_chrdy),
	.isa_addr(isa_addr),
	.isa_la_addr(isa_la_addr),
	.isa_clk(isa_clk),
	.isa_data(isa_data),
	.mem_r(mem_r),
	.mem_w(mem_w),
	.rst_n(rst_n)
);


initial                                                
begin                                                  
// code that executes only once                        
// insert code here --> begin                          
                                                       
// --> end 
clk = 0;
bale_edge = 0;
bale_flag = 0;
io_chrdy = 1;
arm_clk = 0;
test_status = 3'b000;
arm_addr = 12'h00f;
treg_arm_data = 16'h5a5a;
treg_isa_data = 16'hbb5b5;
rst_n = 1; 
#1 
rst_n = 0;
#1
rst_n = 1;                                           
$display("Running testbench");                       
end     
                                               
always                                        
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin  
#1 clk = ~clk;                                                                                             
// --> end                                             
end       

 
always                                        
// optional sensitivity list                           
// @(event1 or event2 or .... eventn)                  
begin                                                  
// code executes for every event on sensitivity list   
// insert code here --> begin  
#1  arm_clk = ~arm_clk;                                                                                             
// --> end                                             
end 

/*arm module*/
always @(posedge arm_clk or negedge rst_n) begin
	if(!rst_n) begin
		arm_cs <= 1'b1;
		arm_rd <= 1'b1;
		arm_wr <= 1'b1;
	end else if (test_status == 3'b000) begin
		arm_wr <= 0;
		arm_cs <= 0;
		arm_addr <= arm_addr + 12'b000000000001;
		treg_arm_data <= treg_arm_data + 16'h0001;
		test_status <= 3'b001;
	end else if (test_status == 3'b001) begin
		if (arm_wait == 1'b1) begin
			arm_cs <= 1'b1;
			arm_wr <= 1'b1;
			test_status <= 3'b010;
		end
	end else if (test_status == 3'b010) begin
		arm_addr <= arm_addr + 16'h0002;
		arm_cs <= 0;
		arm_rd <= 0;
		test_status <= 3'b011;
	end else if (test_status == 3'b011) begin
		if (arm_wait == 1'b1) begin
			arm_cs <= 1'b1;
			arm_rd <= 1'b1;
			test_status <= 3'b111;
		end
	end else if (test_status == 3'b111) begin
		test_status <= 3'b0;
	end
end  

//always @(negedge bale) begin
//	bale_edge = ~bale_edge;
//end
	
//always @(posedge isa_clk or negedge rst_n) begin
//	if (mem_r == 1'b0 && bale_edge != bale_flag) begin
//		treg_isa_data <= treg_isa_data + 16'h0001;
//		bale_flag <= bale_edge;
//		io_chrdy <= 1'b0;
//	end else if (mem_w == 1'b0 && bale_edge != bale_flag) begin
//		io_chrdy <= 1'b0;
//		bale_flag <= bale_edge;
//	end else if (io_chrdy == 1'b0) begin
//		io_chrdy <= 1'b1;
//	end
//end



endmodule

